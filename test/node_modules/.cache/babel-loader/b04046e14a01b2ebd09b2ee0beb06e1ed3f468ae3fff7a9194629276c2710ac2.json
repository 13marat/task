{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: [],\n  reducers: {\n    addCart: (state, action) => [...state, action.payload],\n    updateCart: (state, action) => {\n      const data = action.payload[0];\n      const num = action.payload[1];\n      const cart = current(state);\n      const index = cart.indexOf(action.payload[0]);\n      const start = cart.slice(0, index);\n      const end = cart.slice(index + 1);\n      return [...start, {\n        ...data,\n        count: (data === null || data === void 0 ? void 0 : data.count) + num\n      }, ...end];\n    },\n    removeItem: (state, action) => {\n      const cart = state.filter(item => item.id !== action.payload.id);\n      return cart;\n    }\n  }\n});\nexport const {\n  addCart,\n  updateCart,\n  removeItem\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"names":["createSlice","current","cartSlice","name","initialState","reducers","addCart","state","action","payload","updateCart","data","num","cart","index","indexOf","start","slice","end","count","removeItem","filter","item","id","actions","cartReducer","reducer"],"sources":["C:/Users/MSI4/Desktop/task/test/src/Slices/cartSlice.ts"],"sourcesContent":["import { PayloadAction, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { productsType } from \"../types/Types\";\r\n\r\n\r\nexport const cartSlice = createSlice({\r\n    name: \"cart\",\r\n    initialState: [],\r\n    reducers: {\r\n        addCart: (state: productsType[], action: PayloadAction<productsType>): any => [...state, action.payload],\r\n        updateCart: (state: productsType[], action: PayloadAction<any>): any => {\r\n            \r\n            const data = action.payload[0]\r\n            const num = action.payload[1]\r\n            const cart = current(state)\r\n            const index = cart.indexOf(action.payload[0])\r\n            const start = cart.slice(0, index)\r\n            const end = cart.slice(index + 1)\r\n            return  [...start, {...data, count: data?.count + num} ,...end]\r\n        },\r\n        removeItem: (state: productsType[], action: PayloadAction<productsType>): any => {\r\n            const cart = state.filter((item: productsType) => item.id !== action.payload.id)\r\n            return cart\r\n        },\r\n    }\r\n})\r\n\r\nexport const {addCart, updateCart, removeItem} = cartSlice.actions\r\nexport const cartReducer =  cartSlice.reducer\r\n"],"mappings":"AAAA,SAAwBA,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;AAItE,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACjCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAqB,EAAEC,MAAmC,KAAU,CAAC,GAAGD,KAAK,EAAEC,MAAM,CAACC,OAAO,CAAC;IACxGC,UAAU,EAAEA,CAACH,KAAqB,EAAEC,MAA0B,KAAU;MAEpE,MAAMG,IAAI,GAAGH,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;MAC9B,MAAMG,GAAG,GAAGJ,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;MAC7B,MAAMI,IAAI,GAAGZ,OAAO,CAACM,KAAK,CAAC;MAC3B,MAAMO,KAAK,GAAGD,IAAI,CAACE,OAAO,CAACP,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMO,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;MAClC,MAAMI,GAAG,GAAGL,IAAI,CAACI,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC;MACjC,OAAQ,CAAC,GAAGE,KAAK,EAAE;QAAC,GAAGL,IAAI;QAAEQ,KAAK,EAAE,CAAAR,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,KAAK,IAAGP;MAAG,CAAC,EAAE,GAAGM,GAAG,CAAC;IACnE,CAAC;IACDE,UAAU,EAAEA,CAACb,KAAqB,EAAEC,MAAmC,KAAU;MAC7E,MAAMK,IAAI,GAAGN,KAAK,CAACc,MAAM,CAAEC,IAAkB,IAAKA,IAAI,CAACC,EAAE,KAAKf,MAAM,CAACC,OAAO,CAACc,EAAE,CAAC;MAChF,OAAOV,IAAI;IACf;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACP,OAAO;EAAEI,UAAU;EAAEU;AAAU,CAAC,GAAGlB,SAAS,CAACsB,OAAO;AAClE,OAAO,MAAMC,WAAW,GAAIvB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}