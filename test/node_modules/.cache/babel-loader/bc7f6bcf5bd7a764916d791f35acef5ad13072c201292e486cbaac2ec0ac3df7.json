{"ast":null,"code":"import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { usersReducer } from \"./Slices/usersSlice\";\nimport { itemsReducer } from \"./Slices/ItemsSlice\";\nimport { currentReducer } from \"./Slices/currentUser\";\nimport { cartReducer } from \"./Slices/cartSlice\";\nimport storage from \"redux-persist/lib/storage\";\nimport { errorReducer } from \"./Slices/errorSlice\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nconst rootReducer = combineReducers({\n  current: currentReducer\n});\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store = configureStore({\n  reducer: {\n    users: usersReducer,\n    items: itemsReducer,\n    cart: cartReducer,\n    current: persistedReducer,\n    error: errorReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const persistor = persistStore(store);\nexport default store;","map":{"version":3,"names":["combineReducers","configureStore","usersReducer","itemsReducer","currentReducer","cartReducer","storage","errorReducer","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","rootReducer","current","persistConfig","key","persistedReducer","store","reducer","users","items","cart","error","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["C:/Users/MSI4/Desktop/task/test/src/Store.ts"],"sourcesContent":["import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { usersReducer } from \"./Slices/usersSlice\";\r\nimport { itemsReducer } from \"./Slices/ItemsSlice\";\r\nimport { currentReducer } from \"./Slices/currentUser\";\r\nimport { cartReducer } from \"./Slices/cartSlice\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { errorReducer } from \"./Slices/errorSlice\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst rootReducer = combineReducers({\r\n  current: currentReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    users: usersReducer,\r\n    items: itemsReducer,\r\n    cart: cartReducer,\r\n    current: persistedReducer,\r\n    error: errorReducer\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,QAAQ,kBAAkB;AAClE,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AAEtB,MAAMC,WAAW,GAAGhB,eAAe,CAAC;EAClCiB,OAAO,EAAEb;AACX,CAAC,CAAC;AAEF,MAAMc,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXb;AACF,CAAC;AAED,MAAMc,gBAAgB,GAAGX,cAAc,CAACS,aAAa,EAAEF,WAAW,CAAC;AAEnE,MAAMK,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IACPC,KAAK,EAAErB,YAAY;IACnBsB,KAAK,EAAErB,YAAY;IACnBsB,IAAI,EAAEpB,WAAW;IACjBY,OAAO,EAAEG,gBAAgB;IACzBM,KAAK,EAAEnB;EACT,CAAC;EACDoB,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAACpB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACpE;EACF,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMgB,SAAS,GAAGvB,YAAY,CAACa,KAAK,CAAC;AAC5C,eAAeA,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}