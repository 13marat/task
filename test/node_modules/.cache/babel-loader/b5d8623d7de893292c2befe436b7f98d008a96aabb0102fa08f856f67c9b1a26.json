{"ast":null,"code":"// remove any\nexport const filterProductsData = products => {\n  // TODO: karchacnel, aranc avelord return-neri\n  // TODO: kardal type inference ev vor depqerum e lav grel vor depqeum arzhi chgrel type-@\n  const filteredUsers = products.map(product => ({\n    id: product.id,\n    description: product.description,\n    image: product.image,\n    price: Math.floor(product.price),\n    title: product.title,\n    count: 1\n  })\n  // TODO: destructure\n  );\n\n  return filteredUsers;\n};","map":{"version":3,"names":["filterProductsData","products","filteredUsers","map","product","id","description","image","price","Math","floor","title","count"],"sources":["C:/Users/MSI4/Desktop/task/test/src/helpers/filterProductsData.ts"],"sourcesContent":["import { productsType } from \"../types/Types\";\r\n// remove any\r\nexport const filterProductsData = (products: productsType[]): any => {\r\n  // TODO: karchacnel, aranc avelord return-neri\r\n  // TODO: kardal type inference ev vor depqerum e lav grel vor depqeum arzhi chgrel type-@\r\n  const filteredUsers: productsType[] = products.map((product): productsType => ({    \r\n    id: product.id,\r\n    description: product.description,\r\n    image: product.image,\r\n    price: Math.floor(product.price),\r\n    title: product.title,\r\n    count: 1,\r\n  })\r\n  // TODO: destructure\r\n    \r\n  );\r\n\r\n  return filteredUsers;\r\n};\r\n"],"mappings":"AACA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,QAAwB,IAAU;EACnE;EACA;EACA,MAAMC,aAA6B,GAAGD,QAAQ,CAACE,GAAG,CAAEC,OAAO,KAAoB;IAC7EC,EAAE,EAAED,OAAO,CAACC,EAAE;IACdC,WAAW,EAAEF,OAAO,CAACE,WAAW;IAChCC,KAAK,EAAEH,OAAO,CAACG,KAAK;IACpBC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACN,OAAO,CAACI,KAAK,CAAC;IAChCG,KAAK,EAAEP,OAAO,CAACO,KAAK;IACpBC,KAAK,EAAE;EACT,CAAC;EACD;EAEA,CAAC;;EAED,OAAOV,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}