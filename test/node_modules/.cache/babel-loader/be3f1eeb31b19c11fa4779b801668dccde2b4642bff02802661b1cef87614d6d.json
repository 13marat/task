{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: [],\n  reducers: {\n    addCart: (state, action) => [...state, action.payload],\n    updateCart: (state, action) => {\n      const cart = current(state);\n      const data = action.payload;\n      const itemsIndex = cart.findIndex(item => item.id === data.id);\n      const start = cart.slice(0, itemsIndex);\n      const end = cart.slice(itemsIndex + 1);\n      const {\n        count,\n        price\n      } = cart[itemsIndex];\n      // const currentPrice = price + num * (price / count)\n\n      return [...start, cart[itemsIndex], ...end];\n    },\n    removeItem: (state, action) => state.filter(item => item.id !== action.payload.id)\n  }\n});\nexport const {\n  addCart,\n  updateCart,\n  removeItem\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"names":["createSlice","current","cartSlice","name","initialState","reducers","addCart","state","action","payload","updateCart","cart","data","itemsIndex","findIndex","item","id","start","slice","end","count","price","removeItem","filter","actions","cartReducer","reducer"],"sources":["C:/Users/MSI4/Desktop/task/test/src/Slices/cartSlice.ts"],"sourcesContent":["import { PayloadAction, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { productsType } from \"../types/Types\";\r\n\r\n\r\nexport const cartSlice = createSlice({\r\n    name: \"cart\",\r\n    initialState: [],\r\n    reducers: {\r\n        addCart: (state: productsType[], action: PayloadAction<productsType>): any => [...state, action.payload],  \r\n        updateCart: (state: productsType[], action: PayloadAction<productsType>): any => {\r\n            const cart = current(state)\r\n            const data = action.payload\r\n            const itemsIndex = cart.findIndex(item => item.id === data.id)\r\n            const start = cart.slice(0, itemsIndex)\r\n            const end = cart.slice(itemsIndex + 1)            \r\n            const {count, price} = cart[itemsIndex]\r\n            // const currentPrice = price + num * (price / count)\r\n\r\n            return  [...start, cart[itemsIndex], ...end]\r\n        },\r\n        removeItem: (state: productsType[], action: PayloadAction<productsType>): any => state.filter((item: productsType) => item.id !== action.payload.id),\r\n    }\r\n})\r\n\r\nexport const {addCart, updateCart, removeItem} = cartSlice.actions\r\nexport const cartReducer =  cartSlice.reducer"],"mappings":"AAAA,SAAwBA,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;AAItE,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACjCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAqB,EAAEC,MAAmC,KAAU,CAAC,GAAGD,KAAK,EAAEC,MAAM,CAACC,OAAO,CAAC;IACxGC,UAAU,EAAEA,CAACH,KAAqB,EAAEC,MAAmC,KAAU;MAC7E,MAAMG,IAAI,GAAGV,OAAO,CAACM,KAAK,CAAC;MAC3B,MAAMK,IAAI,GAAGJ,MAAM,CAACC,OAAO;MAC3B,MAAMI,UAAU,GAAGF,IAAI,CAACG,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;MAC9D,MAAMC,KAAK,GAAGN,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEL,UAAU,CAAC;MACvC,MAAMM,GAAG,GAAGR,IAAI,CAACO,KAAK,CAACL,UAAU,GAAG,CAAC,CAAC;MACtC,MAAM;QAACO,KAAK;QAAEC;MAAK,CAAC,GAAGV,IAAI,CAACE,UAAU,CAAC;MACvC;;MAEA,OAAQ,CAAC,GAAGI,KAAK,EAAEN,IAAI,CAACE,UAAU,CAAC,EAAE,GAAGM,GAAG,CAAC;IAChD,CAAC;IACDG,UAAU,EAAEA,CAACf,KAAqB,EAAEC,MAAmC,KAAUD,KAAK,CAACgB,MAAM,CAAER,IAAkB,IAAKA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACO,EAAE;EACvJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACV,OAAO;EAAEI,UAAU;EAAEY;AAAU,CAAC,GAAGpB,SAAS,CAACsB,OAAO;AAClE,OAAO,MAAMC,WAAW,GAAIvB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}