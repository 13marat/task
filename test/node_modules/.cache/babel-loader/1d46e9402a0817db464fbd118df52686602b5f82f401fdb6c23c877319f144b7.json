{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: [],\n  reducers: {\n    addCart: (state, action) => {\n      const cart = [...state, action.payload];\n      return cart;\n    },\n    updateCart: (state, action) => {\n      var _action$payload$;\n      const cart = current(state);\n      const index = cart.indexOf(action.payload[0]);\n      const start = cart.slice(0, index);\n      const end = cart.slice(index + 1);\n      return [...start, {\n        ...action.payload[0],\n        count: ((_action$payload$ = action.payload[0]) === null || _action$payload$ === void 0 ? void 0 : _action$payload$.count) + action.payload[1]\n      }, ...end];\n    },\n    removeItem: (state, action) => {\n      const cart = state.filter(item => item.id !== action.payload.id);\n      return cart;\n    }\n  }\n});\nexport const {\n  addCart,\n  updateCart,\n  removeItem\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"names":["createSlice","current","cartSlice","name","initialState","reducers","addCart","state","action","cart","payload","updateCart","_action$payload$","index","indexOf","start","slice","end","count","removeItem","filter","item","id","actions","cartReducer","reducer"],"sources":["C:/Users/MSI4/Desktop/task/test/src/Slices/cartSlice.ts"],"sourcesContent":["import { PayloadAction, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { productsType } from \"../types/Types\";\r\n\r\n\r\nexport const cartSlice = createSlice({\r\n    name: \"cart\",\r\n    initialState: [],\r\n    reducers: {\r\n        addCart: (state: productsType[], action: PayloadAction<productsType>): any => {\r\n            const cart: productsType[]  = [...state, action.payload]\r\n            return cart\r\n        },\r\n        updateCart: (state: productsType[], action: PayloadAction<any>): any => {\r\n            \r\n            \r\n            const cart = current(state)\r\n            const index = cart.indexOf(action.payload[0])\r\n            const start = cart.slice(0, index)\r\n            const end = cart.slice(index + 1)\r\n            return  [...start, {...action.payload[0], count: action.payload[0]?.count + action.payload[1]} ,...end]\r\n        },\r\n        removeItem: (state: productsType[], action: PayloadAction<productsType>): any => {\r\n            const cart = state.filter((item: productsType) => item.id !== action.payload.id)\r\n            return cart\r\n        },\r\n    }\r\n})\r\n\r\nexport const {addCart, updateCart, removeItem} = cartSlice.actions\r\nexport const cartReducer =  cartSlice.reducer\r\n"],"mappings":"AAAA,SAAwBA,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;AAItE,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACjCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAqB,EAAEC,MAAmC,KAAU;MAC1E,MAAMC,IAAoB,GAAI,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;MACxD,OAAOD,IAAI;IACf,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAqB,EAAEC,MAA0B,KAAU;MAAA,IAAAI,gBAAA;MAGpE,MAAMH,IAAI,GAAGR,OAAO,CAACM,KAAK,CAAC;MAC3B,MAAMM,KAAK,GAAGJ,IAAI,CAACK,OAAO,CAACN,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMK,KAAK,GAAGN,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;MAClC,MAAMI,GAAG,GAAGR,IAAI,CAACO,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC;MACjC,OAAQ,CAAC,GAAGE,KAAK,EAAE;QAAC,GAAGP,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC;QAAEQ,KAAK,EAAE,EAAAN,gBAAA,GAAAJ,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,cAAAE,gBAAA,uBAAjBA,gBAAA,CAAmBM,KAAK,IAAGV,MAAM,CAACE,OAAO,CAAC,CAAC;MAAC,CAAC,EAAE,GAAGO,GAAG,CAAC;IAC3G,CAAC;IACDE,UAAU,EAAEA,CAACZ,KAAqB,EAAEC,MAAmC,KAAU;MAC7E,MAAMC,IAAI,GAAGF,KAAK,CAACa,MAAM,CAAEC,IAAkB,IAAKA,IAAI,CAACC,EAAE,KAAKd,MAAM,CAACE,OAAO,CAACY,EAAE,CAAC;MAChF,OAAOb,IAAI;IACf;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACH,OAAO;EAAEK,UAAU;EAAEQ;AAAU,CAAC,GAAGjB,SAAS,CAACqB,OAAO;AAClE,OAAO,MAAMC,WAAW,GAAItB,SAAS,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}